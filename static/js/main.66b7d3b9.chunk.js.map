{"version":3,"sources":["api/api.ts","api/posts.ts","api/comments.ts","store/commentsReducer.ts","store/postsReducer.ts","store/usersReducer.ts","store/index.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/Filters/Filters.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","options","fetch","response","ok","Error","status","statusText","json","getUserPosts","userId","getPostDetails","postId","getPostComments","initialState","comments","isCommentsHidden","SET_COMMENTS","SET_COMMENTS_HIDDEN","setComments","type","payload","loadComments","dispatch","commentsSelectors","value","posts","selectedPost","isPostsLoading","isDetailsLoading","SET_POSTS","SET_SELECTED_POST","SET_POSTS_IS_LOADING","SET_DETAILS_IS_LOADING","setPosts","setSelectedPost","post","setPostsLoadingStatus","setDetailsLoadingStatus","loadPosts","postsSelectors","users","SET_USERS","setUsers","usersSelectors","rootReducer","combineReducers","state","action","getPostsLoadingStatus","getDetailsLoadingStatus","getUsers","getPosts","getSelectedPost","getComments","getCommentsIsHidden","store","createStore","composeWithDevTools","applyMiddleware","thunk","Loader","className","PostsList","props","selectedUserId","selectedPostId","searchParams","useDispatch","useSelector","isLoading","query","get","history","useHistory","useEffect","handlePostRemove","id","method","then","filteredPosts","useMemo","filter","title","includes","toLowerCase","length","map","onClick","delete","push","search","toString","set","handlePostSelect","NewCommentForm","onAdd","useState","name","setName","email","setEmail","body","setBody","handleInput","target","onSubmit","event","preventDefault","placeholder","onChange","PostDetails","loadingStatus","removeComment","commentId","deleteCommentFromServer","comment","newComment","headers","JSON","stringify","addCommentOnServer","Filters","appliedQuery","setQuery","applyQuery","useCallback","debounce","newQuery","trim","user","App","location","useLocation","URLSearchParams","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66b7d3b9.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, options = {}) => {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n","import { request } from \"./api\"\n\nexport const getAllPosts = (): Promise<Post[]> => {\n  return request('/posts');\n}\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  return request(`/posts?userId=${userId}`);\n}\n\nexport const getPostDetails = (postId: number): Promise<Post> => {\n  return request(`/posts/${postId}`);\n}\n\nexport const deletePost = (postId: number): Promise<Post> => {\n  return request(`/posts/${postId}`, {\n    method: 'DELETE',\n  });\n};\n","import { request } from './api';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteCommentFromServer = (commentId: number) => {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addCommentOnServer = (newComment: Partial<Comment>) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n","import { Dispatch, AnyAction } from 'redux';\nimport { getPostComments } from '../api/comments';\n\nexport interface RootState {\n  comments: Comment[];\n  isCommentsHidden: boolean;\n}\n\nconst initialState: RootState = {\n  comments: [],\n  isCommentsHidden: false,\n};\n\nconst SET_COMMENTS = 'SET_COMMENTS';\nconst SET_COMMENTS_HIDDEN = 'SET_COMMENTS_HIDDEN';\n\nexport const setComments = (comments: Comment[]) => ({\n  type: SET_COMMENTS,\n  payload: comments,\n});\n\nexport const setCommentsHidden = (value: boolean) => ({\n  type: SET_COMMENTS_HIDDEN,\n  payload: value,\n});\n\nexport const loadComments = (postId: number) => {\n  return async (dispatch: Dispatch) => {\n    const comments = await getPostComments(postId);\n    dispatch(setComments(comments));\n  };\n};\n\nexport const commentsSelectors = {\n  getComments: (comments: Comment[]) => comments,\n  getIsCommentsHidden: (value: boolean) => value,\n};\n\nexport const commentsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return {\n        ...state,\n        comments: action.payload,\n      };\n\n    case SET_COMMENTS_HIDDEN:\n      return {\n        ...state,\n        isCommentsHidden: action.payload,\n      };\n\n    default:\n      return state;\n  };\n};\n","import { Dispatch, AnyAction } from 'redux';\nimport { getAllPosts, getPostDetails, getUserPosts } from '../api/posts';\n\nexport interface RootState {\n  posts: Post[];\n  selectedPost: Post | null;\n  isPostsLoading: boolean;\n  isDetailsLoading: boolean;\n}\n\nconst initialState: RootState = {\n  posts: [],\n  selectedPost: null,\n  isPostsLoading: true,\n  isDetailsLoading: true,\n}\n\nconst SET_POSTS = 'SET_POSTS';\nconst SET_SELECTED_POST = 'SET_SELECTED_POST';\nconst SET_POSTS_IS_LOADING = 'SET_POSTS_IS_LOADING';\nconst SET_DETAILS_IS_LOADING = 'SET_DETAILS_IS_LOADING';\n\nexport const setPosts = (posts: Post[]) => ({\n  type: SET_POSTS,\n  payload: posts,\n});\n\nexport const setSelectedPost = (post: Post) => ({\n  type: SET_SELECTED_POST,\n  payload: post,\n});\n\nexport const setPostsLoadingStatus = (status: boolean) => ({\n  type: SET_POSTS_IS_LOADING,\n  payload: status,\n});\n\nexport const setDetailsLoadingStatus = (status: boolean) => ({\n  type: SET_DETAILS_IS_LOADING,\n  payload: status,\n})\n\nexport const loadPosts = (userId: number) => {\n  if (!userId) {\n    return async (dispatch: Dispatch) => {\n      dispatch(setPostsLoadingStatus(true));\n      const posts = await getAllPosts();\n      dispatch(setPosts(posts));\n      dispatch(setPostsLoadingStatus(false));\n    }\n  }\n\n  return async (dispatch: Dispatch) => {\n    dispatch(setPostsLoadingStatus(true));\n    const posts = await getUserPosts(userId);\n    dispatch(setPosts(posts));\n    dispatch(setPostsLoadingStatus(false));\n  }\n}\n\nexport const loadPostDetails = (postId: number) => (\n  async (dispatch: Dispatch) => {\n    dispatch(setDetailsLoadingStatus(true));\n    const post = await getPostDetails(postId);\n    dispatch(setSelectedPost(post));\n    dispatch(setDetailsLoadingStatus(false));\n  }\n);\n\nexport const postsSelectors = {\n  getPosts: (posts: Post[]) => posts,\n  getSelectedPost: (post: Post | null) => post,\n  getPostsStatus: (status: boolean) => status,\n  getDetailsStatus: (status: boolean) => status,\n}\n\nexport const postsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case SET_SELECTED_POST:\n      return {\n        ...state,\n        selectedPost: action.payload,\n      };\n\n    case SET_POSTS_IS_LOADING:\n      return {\n        ...state,\n        isPostsLoading: action.payload,\n      };\n\n    case SET_DETAILS_IS_LOADING:\n      return {\n        ...state,\n        isDetailsLoading: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { Dispatch, AnyAction } from 'redux'\nimport { getUsersFromServer } from '../api/users';\n\nexport interface RootState {\n  users: User[];\n}\n\nconst initialState: RootState = {\n  users: [],\n}\n\nconst SET_USERS = 'SET_USERS';\n\nexport const setUsers = (users: User[]) => ({\n  type: SET_USERS,\n  payload: users,\n});\n\nexport const loadUsers = () => (\n  async (dispatch: Dispatch) => {\n    const users = await getUsersFromServer();\n    dispatch(setUsers(users));\n  }\n);\n\nexport const usersSelectors = {\n  getUsers: (users: User[]) => users,\n}\n\nexport const usersReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USERS:\n      return {\n        ...state,\n        users: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { commentsReducer, commentsSelectors } from './commentsReducer';\nimport { postsReducer, postsSelectors } from './postsReducer';\nimport { usersReducer, usersSelectors } from './usersReducer';\n\ntype RootState = ReturnType<typeof rootReducer>;\n\nconst rootReducer = combineReducers({\n  users: usersReducer,\n  posts: postsReducer,\n  comments: commentsReducer,\n});\n\nexport const getPostsLoadingStatus = (state: RootState) => {\n  return postsSelectors.getPostsStatus(state.posts.isPostsLoading);\n}\n\nexport const getDetailsLoadingStatus = (state: RootState) => {\n  return postsSelectors.getDetailsStatus(state.posts.isDetailsLoading);\n}\n\nexport const getUsers = (state: RootState) => {\n  return usersSelectors.getUsers(state.users.users);\n};\n\nexport const getPosts = (state: RootState) => {\n  return postsSelectors.getPosts(state.posts.posts);\n};\n\nexport const getSelectedPost = (state: RootState) => {\n  return postsSelectors.getSelectedPost(state.posts.selectedPost);\n};\n\nexport const getComments = (state: RootState) => {\n  return commentsSelectors.getComments(state.comments.comments);\n};\n\nexport const getCommentsIsHidden = (state: RootState) => {\n  return commentsSelectors.getIsCommentsHidden(state.comments.isCommentsHidden);\n};\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { deletePost } from '../../api/posts';\nimport { getPostsLoadingStatus, getPosts } from '../../store';\nimport { loadPosts } from '../../store/postsReducer';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ninterface Props {\n  selectedUserId: number;\n  selectedPostId: number;\n  searchParams: URLSearchParams;\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const {\n    selectedUserId,\n    selectedPostId,\n    searchParams,\n  } = props;\n\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const isLoading = useSelector(getPostsLoadingStatus);\n  const query = searchParams.get('search');\n  const history = useHistory();\n\n  useEffect(() => {\n    dispatch(loadPosts(selectedUserId));\n  }, [dispatch, selectedUserId]);\n\n  const handlePostSelect = (id: number) => {\n    if (selectedPostId === id) {\n      searchParams.delete('postId');\n      history.push({search: searchParams.toString()})\n      return;\n    }\n\n    searchParams.set('postId', `${id}`)\n    history.push({search: searchParams.toString()})\n  };\n\n  const handlePostRemove = (id: number) => {\n    deletePost(id)\n      .then(() => dispatch(loadPosts(selectedUserId)));\n  };\n\n  const filteredPosts = useMemo(() => {\n    if (query) {\n      return posts.filter(post => post.title.includes(query.toLowerCase()));\n    } else {\n      return posts;\n    }\n  }, [posts, query]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {posts.length === 0 && (\n        <h3>Selected user has not posted anything yet :(</h3>\n      )}\n\n      {filteredPosts.length > 0 ? (\n        <ul className=\"PostsList__list\">\n        {filteredPosts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]:`} </b>\n              {post.title}\n            </div>\n            <div className=\"PostsList__buttons-wrapper\">\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handlePostSelect(post.id)}\n              >\n                {selectedPostId === post.id ? 'Close' : 'Open'}\n              </button>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handlePostRemove(post.id)}\n              >\n                Delete\n              </button>\n            </div>\n        </li>\n        ))}\n      </ul>\n      ) : (\n        <h3>Nothing is found by such query...</h3>\n      )}\n    </div>\n  )\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  selectedPostId: number;\n  onAdd: (newComment: Partial<Comment>) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { selectedPostId, onAdd } = props;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleInput = ({ target }: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    switch (target.name) {\n      case 'name':\n        setName(target.value);\n        break;\n\n      case 'email':\n        setEmail(target.value);\n        break;\n\n      case 'body':\n        setBody(target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    const newComment = {\n      name,\n      email,\n      body,\n      postId: selectedPostId,\n    };\n\n    onAdd(newComment);\n    reset();\n  }\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={handleInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={handleInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  )\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addCommentOnServer, deleteCommentFromServer } from '../../api/comments';\nimport {\n  getComments,\n  getCommentsIsHidden,\n  getDetailsLoadingStatus,\n  getSelectedPost,\n} from '../../store';\nimport { loadComments, setCommentsHidden } from '../../store/commentsReducer';\nimport { loadPostDetails } from '../../store/postsReducer';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const dispatch = useDispatch();\n  const selectedPost = useSelector(getSelectedPost);\n  const comments = useSelector(getComments);\n  const loadingStatus = useSelector(getDetailsLoadingStatus);\n  const isCommentsHidden = useSelector(getCommentsIsHidden);\n\n  useEffect(() => {\n    dispatch(loadPostDetails(selectedPostId));\n    dispatch(loadComments(selectedPostId))\n  }, [selectedPostId, dispatch]);\n\n  const handleCommentsHide = () => {\n    dispatch(setCommentsHidden(!isCommentsHidden));\n  };\n\n  const removeComment = (commentId: number) => {\n    deleteCommentFromServer(commentId)\n      .then(() => dispatch(loadComments(selectedPostId)));\n  };\n\n  const addComment = (newComment: Partial<Comment>) => {\n    addCommentOnServer(newComment)\n      .then(() => dispatch(loadComments(selectedPostId)));\n  }\n\n  return (\n    !loadingStatus ? (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{selectedPost?.body}</p>\n        </section>\n\n        {comments.length > 0 && (\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={handleCommentsHide}\n            >\n              {isCommentsHidden\n                ? `Show ${comments.length} ${comments.length === 1 ? 'comment' : 'comments'}`\n                : `Hide ${comments.length} ${comments.length === 1 ? 'comment' : 'comments'}`}\n            </button>\n\n            {!isCommentsHidden && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li key={comment.id} className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => removeComment(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        )}\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              selectedPostId={selectedPostId}\n              onAdd={addComment}\n            />\n          </div>\n        </section>\n      </div>\n    ) : (\n      <Loader />\n    )\n  );\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { getUsers } from \"../../store\";\nimport { loadUsers } from \"../../store/usersReducer\";\nimport debounce from 'lodash/debounce';\n\ninterface Props {\n  searchParams: URLSearchParams;\n  selectedUserId: number;\n}\n\nexport const Filters: React.FC<Props> = (props) => {\n  const { searchParams, selectedUserId } = props;\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const users = useSelector(getUsers);\n  const appliedQuery = searchParams.get('search') || '';\n  const [query, setQuery] = useState(appliedQuery);\n\n  useEffect(() => {\n    dispatch(loadUsers());\n  }, [dispatch, users]);\n\n  const handleUserSelect = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = target.value;\n    if (+value > 0) {\n      searchParams.set('userId',value);\n    } else {\n      searchParams.delete('userId');\n    }\n\n    history.push({ search: searchParams.toString() });\n  };\n\n  const applyQuery = useCallback(\n    debounce((newQuery: string) => {\n    if (newQuery.trim().length > 0) {\n      searchParams.set('search', newQuery);\n    } else {\n      searchParams.delete('search');\n    }\n\n    history.push({ search: searchParams.toString() })\n    }, 500),\n    []\n  );\n\n  const handleSearch = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(target.value);\n    applyQuery(target.value);\n  }\n\n  return (\n    <>\n      <label>\n        Select a user: &nbsp;\n\n        <select\n          className=\"App__user-selector\"\n          onChange={handleUserSelect}\n          value={selectedUserId}\n        >\n          <option value={0}>All users</option>\n          {users.map(user => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n      </label>\n\n      <label>\n        Search by title: &nbsp;\n        <input\n          className=\"App__search\"\n          type=\"text\"\n          value={query}\n          onChange={handleSearch}\n        />\n      </label>\n    </>\n  );\n}\n","import { request } from \"./api\"\n\nexport const getUsersFromServer = (): Promise<User[]> => {\n  return request('/users');\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { useLocation } from 'react-router';\nimport { Filters } from './components/Filters';\n\nconst App: React.FC = () => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedUserId = searchParams.get('userId') || 0;\n  const selectedPostId = searchParams.get('postId') || 0;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <Filters\n        searchParams={searchParams}\n        selectedUserId={+selectedUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={+selectedUserId}\n            selectedPostId={+selectedPostId}\n            searchParams={searchParams}\n          />\n        </div>\n\n        {selectedPostId > 0 && (\n          <div className=\"App__content\">\n          <PostDetails selectedPostId={+selectedPostId}/>\n        </div>\n        )}\n      </main>\n    </div>\n  )\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n   </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}